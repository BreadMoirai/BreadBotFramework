/*
 *        Copyright 2017-2018 Ton Ly (BreadMoirai)
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'com.sedmelluq.jdaction' version '1.0.1'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'maven-publish'
    id 'signing'
    id 'com.github.breadmoirai.github-release' version '1.1.3'
    id 'org.ajoberstar.git-publish' version '0.3.2'
    id 'jacoco'
}

final author = 'BreadMoirai'
final artifactId = 'breadbot-framework'
group "com.github.${author.toLowerCase()}"
version '0.12.1'

//project.hasProperty never seems to work properly
final boolean keysArePresent = false

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    //Discord Java Library
    compileOnly 'net.dv8tion:JDA:3.4.0_324'

    compile 'org.slf4j:slf4j-api:1.7.25'

    compile 'org.reflections:reflections:0.9.10'
    compile 'com.typesafe:config:1.3.2'
    //compile 'com.jagrosh:JDA-Utilities:1.9'

    testCompile 'uk.org.lidalia:slf4j-test:1.1.0'
    testCompile('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'net.dv8tion:JDA:3.4.0_318'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:2.+'
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC

    exclude 'com/github/breadmoirai/breadbot/framework/internal'
}

githubRelease {
    if (keysArePresent)
        token = project.getProperty('github.key').toString()
    String version = project.version
    def title = ""
    it.name = "$version $title"
    def content = ""
    it.body = "$content\n## Adding as Dependency\n### Gradle\n```gradle\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile '$project.group:$artifactId:$project.version'\n}\n```\n\n### Maven\n```xml\n<repository>\n  <id>jcenter</id>\n  <name>jcenter</name>\n  <url>http://jcenter.bintray.com/</url>\n</repository>\n\n<dependency>\n  <groupId>$project.group</groupId>\n  <artifactId>$artifactId</artifactId>\n  <version>$project.version</version>\n  <type>pom</type>\n</dependency>\n```"
    FilenameFilter filter = { dir, file -> file.contains(version) }
    releaseAssets = jar.destinationDir.listFiles filter
//    println releaseAssets.findAll()
}

gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'https://github.com/BreadMoirai/BreadBotFramework.git'
    // branch will be created if it doesn't exist
    branch = 'gh-pages'

    contents {
        from javadoc.destinationDir
    }

    commitMessage = "Javadoc Ver ${project.version} on ${new Date()}" // defaults to 'Generated by gradle-git-publish'
}

gitPublishReset {
    dependsOn javadoc
}

bintray {
    user = author.toLowerCase()
    if (keysArePresent)
        key = project.getProperty('bintray.key').toString()
    publications = ["BintrayRelease"]
    publish = true
    pkg {
        repo = 'maven'
        name = artifactId
        licenses = ['Apache-2.0']
        vcsUrl = "https://github.com/${author}/${project.name}.git"
        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications.create('BintrayRelease', MavenPublication) {
        from components.java
        it.groupId = project.group as String
        it.artifactId = artifactId
        it.version = version
        artifact javadocJar
        artifact sourcesJar
        artifact shadowJar
    }
}

compileJava.options.encoding = 'UTF-8'

shadowJar.classifier = "withDependencies"
javadoc.source = sourceSets.main.allJava
javadoc.failOnError = false

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

task jarMake {
    dependsOn jar
    dependsOn sourcesJar
    dependsOn javadocJar
    dependsOn shadowJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
        csv.enabled = false
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}