plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'com.sedmelluq.jdaction' version '1.0.1'
    id 'com.jfrog.bintray' version '1.7.2'
    id 'maven-publish'
    id 'signing'
}

group 'net.breadmoirai'
version '0.3.6'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    //Discord Java Library
    compile 'net.dv8tion:JDA:3.2.0_227'

    //Database
    compile 'org.jdbi:jdbi3:3.0.0-beta1'
    compile 'org.jdbi:jdbi3-parent:3.0.0-beta1'
    compile 'org.jdbi:jdbi3-sqlobject:3.0.0-beta1'

    //slf4j
    compile 'org.slf4j:slf4j-api:1.8.0-alpha2'

    //Utility
    compile 'org.reflections:reflections:0.9.10'
    //compile 'com.jagrosh:JDA-Utilities:1.2'
    compile 'org.jetbrains:annotations:13.0'


    //testing
//    compile 'com.sedmelluq:lavaplayer:1.2.42'
//    compile 'org.slf4j:slf4j-simple:1.8.0-alpha2'
//    compile 'org.apache.derby:derby:10.13.1.1'
//    compile 'com.google.api-client:google-api-client:1.22.0'
//    compile 'com.google.apis:google-api-services-youtube:v3-rev183-1.22.0'
}

bintray {
    user = 'breadmoirai'
    key = new File('bintray.key').getText()
    publications = ["BintrayRelease"]
    pkg {
        repo = 'maven'
        name = 'SBF'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/breadmoirai/SamuraiBotFramework.git'
        publish = true
        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version
            artifact javadocJar
            artifact sourcesJar
        }
    }
}



compileJava.options.encoding = 'UTF-8'

shadowJar.classifier = "withDependencies"
javadoc.source = sourceSets.main.allJava
javadoc.failOnError = false

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

task jarMake{
    dependsOn jar
    dependsOn sourcesJar
    dependsOn javadocJar
    dependsOn shadowJar
}

task javadocDocsDir(type: Copy) {
    from javadoc.destinationDir
    into 'docs'
}