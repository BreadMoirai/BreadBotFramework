plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'com.sedmelluq.jdaction' version '1.0.1'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'maven-publish'
    id 'signing'
    id 'com.github.breadmoirai.github-release' version '1.1.3'
}

final author = 'breadmoirai'
final artifactId = 'breadbot-framework'
group "com.github.${author}"
version '0.7.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    //Discord Java Library
    compileOnly 'net.dv8tion:JDA:3.3.1_303'

    //Database
//    compile 'org.jdbi:jdbi3:3.0.0-beta1'
//    compile 'org.jdbi:jdbi3-parent:3.0.0-beta1'
//    compile 'org.jdbi:jdbi3-sqlobject:3.0.0-beta1'

    //slf4j
    compile 'org.slf4j:slf4j-api:1.7.25'
//    compile 'com.squareup.okhttp3:okhttp:3.8.1'
//    compile 'com.j256.simplemagic:simplemagic:1.10'
    //Utility
    compile 'org.reflections:reflections:0.9.10'
    //compile 'com.jagrosh:JDA-Utilities:1.2'
    compile 'org.jetbrains:annotations:13.0'

//    compile 'org.apache.commons:commons-lang3:3.6'

    //testing
//    compile 'com.sedmelluq:lavaplayer:1.2.42'
//    compile 'org.slf4j:slf4j-simple:1.8.0-alpha2'
//    compile 'org.apache.derby:derby:10.13.1.1'
//    compile 'com.google.api-client:google-api-client:1.22.0'
//    compile 'com.google.apis:google-api-services-youtube:v3-rev183-1.22.0'
    testCompile 'ch.qos.logback:logback-classic:1.2.3'
    testCompile('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'net.dv8tion:JDA:3.3.1_284'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}

def body = "\n## Adding as Dependency\n### Gradle\n```gradle\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile '$project.group:$artifactId:$project.version'\n}\n```\n\n### Maven\n```xml\n<repository>\n  <id>jcenter</id>\n  <name>jcenter</name>\n  <url>http://jcenter.bintray.com/</url>\n</repository>\n\n<dependency>\n  <groupId>$project.group</groupId>\n  <artifactId>$artifactId</artifactId>\n  <version>$project.version</version>\n  <type>pom</type>\n</dependency>\n```"

task printBody {
    println body
}

githubRelease {
    //if (hasProperty('github.key'))
     token = getProperty('github.key').toString()
    String version = project.version
    it.body = body
    prerelease = true
    FilenameFilter filter = { dir, file -> file.contains(version) }
    releaseAssets = jar.destinationDir.listFiles filter
//    println releaseAssets.findAll()
}


bintray {
    user = author
    key = getProperty('bintray.key').toString()
    publications = ["BintrayRelease"]
    publish = true
    pkg {
        repo = 'maven'
        name = artifactId
        licenses = ['Apache-2.0']
        vcsUrl = "https://github.com/${author}/${project.name}.git"
        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications.create('BintrayRelease', MavenPublication) {
        from components.java
        groupId project.group as String
        it.artifactId artifactId
        version version
        artifact javadocJar
        artifact sourcesJar
        artifact shadowJar

    }
}

compileJava.options.encoding = 'UTF-8'

shadowJar.classifier = "withDependencies"
javadoc.source = sourceSets.main.allJava
javadoc.failOnError = false

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

task jarMake {
    dependsOn jar
    dependsOn sourcesJar
    dependsOn javadocJar
    dependsOn shadowJar
}

task docRepo() {
    def docDir = file('../breaddocs')
    def repoDir = file(docDir.getAbsolutePath() + '/breadbotframework')
    if (docDir.mkdir() || (docDir.exists() && !repoDir.exists())) {
        'git clone https://github.com/breadmoirai/breadbotframework.git'.execute(null, docDir).waitFor()
        'git checkout --orphan gh-pages'.execute(null, repoDir).waitFor()
    }
    'git rm -rf .'.execute(null, repoDir)
}

task javadocDir(type: Copy) {
    dependsOn docRepo
    dependsOn javadoc
    from javadoc.destinationDir
    into '../breaddocs/breadbotframework'
}

task publishJavadoc() {
    //this doesn't work. Just gonna go manually for now. Ugh
    group 'publishing'
    dependsOn javadoc
    dependsOn javadocDir
    def dir = file('../breaddocs/breadbotframework')
    'git add .'.execute(null, dir)
    "git commit -m \"JavadocWebsite ver ${project.version} on ${new Date()}\"".execute(null, dir)
    'git push origin gh-pages'.execute(null, dir)
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}